# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2023-06-07 09:52:37 krylon>
#
#+TAGS: optimize(o) refactor(r) bug(b) feature(f) architecture(a)
#+TAGS: web(w) database(d) javascript(j) ui(u)
#+TODO: TODO(t) IMPLEMENT(i) TEST(e) RESEARCH(r) | DONE(d)
#+TODO: MEDITATE(m) PLANNING(p) REFINE(n) | FAILED(f) CANCELLED(c) SUSPENDED(s)
#+TODO: EXPERIMENT(x) |
#+PRIORITIES: A G D

* uptimed
  Uptimed is an application to keep track of the uptime and system load of
  several systems and watch the recorded data in a web interface.
** Clocktable
   #+BEGIN: clocktable :scope file :maxlevel 20
   #+CAPTION: Clock summary at [2023-06-07 Mi 09:52]
   | Headline                                        | Time      |         |       |      |      |
   |-------------------------------------------------+-----------+---------+-------+------+------|
   | *Total time*                                    | *1d 5:58* |         |       |      |      |
   |-------------------------------------------------+-----------+---------+-------+------+------|
   | uptimed                                         | 1d 5:58   |         |       |      |      |
   | \_  Components [2/5]                            |           | 1d 5:58 |       |      |      |
   | \_    CLI [1/1]                                 |           |         |  0:22 |      |      |
   | \_      Specify address and port in separate... |           |         |       | 0:22 |      |
   | \_    Database [0/0]                            |           |         |  4:43 |      |      |
   | \_    Server [3/4]                              |           |         | 21:05 |      |      |
   | \_      Compression                             |           |         |       | 0:37 |      |
   | \_      Graphing                                |           |         |       | 3:37 |      |
   | \_      Settings                                |           |         |       | 3:41 |      |
   | \_        Period for chart                      |           |         |       |      | 3:41 |
   | \_    Client [1/1]                              |           |         |  3:48 |      |      |
   | \_      Offline buffering                       |           |         |       | 1:33 |      |
   #+END:
** Components [2/5]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** CLI [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
**** DONE Specify address and port in separate parameters
     CLOSED: [2023-06-07 Mi 09:52]
     :LOGBOOK:
     CLOCK: [2023-06-07 Mi 09:30]--[2023-06-07 Mi 09:52] =>  0:22
     :END:
*** Database [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-06-02 Fr 17:57]--[2023-06-02 Fr 17:58] =>  0:01
    CLOCK: [2023-06-02 Fr 16:40]--[2023-06-02 Fr 16:59] =>  0:19
    CLOCK: [2023-06-02 Fr 10:12]--[2023-06-02 Fr 10:51] =>  0:39
    CLOCK: [2023-06-02 Fr 09:35]--[2023-06-02 Fr 10:00] =>  0:25
    CLOCK: [2023-06-01 Do 18:33]--[2023-06-01 Do 21:52] =>  3:19
    :END:
    I'm not sure I want to use SQLite *again*, maybe I should give nutsdb a
    try. It has transactions, runs embedded, and it's written in pure Go.
    On the other hand, SQLite just works, and it takes care of so many
    problems.
    *sigh* I'm going to use SQLite. There is no reason /not/ to use it,
    really.
*** TODO [#F] mDNS [0/0]
    I want to use mDNS - if possible - to announce and find the server.
*** Server [3/4]                                                        :web:
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-06-05 Mo 16:54]--[2023-06-05 Mo 17:37] =>  0:43
    CLOCK: [2023-06-05 Mo 09:56]--[2023-06-05 Mo 12:25] =>  2:29
    CLOCK: [2023-06-03 Sa 20:48]--[2023-06-03 Sa 23:22] =>  2:34
    CLOCK: [2023-06-03 Sa 16:24]--[2023-06-03 Sa 20:22] =>  3:58
    CLOCK: [2023-06-02 Fr 19:22]--[2023-06-02 Fr 21:32] =>  2:10
    CLOCK: [2023-06-02 Fr 17:58]--[2023-06-02 Fr 19:14] =>  1:16
    :END:
    I'm going to use a web server both for the frontend and for the
    client-server communication. I'll need the web server anyway, might as
    well use it for the clients instead of hand-rolling some half-baked
    protocol myself.
**** TODO [#C] FastCGI
     I would like to use fcgi to access the server from a regular web
     server. I'm not entirely sure how to do that.
**** DONE Compression
     CLOSED: [2023-06-06 Di 10:57]
     :LOGBOOK:
     CLOCK: [2023-06-06 Di 10:45]--[2023-06-06 Di 10:57] =>  0:12
     CLOCK: [2023-06-06 Di 10:11]--[2023-06-06 Di 10:36] =>  0:25
     :END:
     HTTP allows compression of content, I will look into that.

     My first attempt did not work, and it's not important enough to consider
     pursuing at the moment.

     PS I found the useful httpcompress middleware and also how to use it with
     my http stack, so now it's basically a 2-line change, and it just works.
**** DONE Graphing                                                       :ui:
     CLOSED: [2023-06-05 Mo 22:00]
     :LOGBOOK:
     CLOCK: [2023-06-05 Mo 21:20]--[2023-06-05 Mo 22:00] =>  0:40
     CLOCK: [2023-06-05 Mo 19:40]--[2023-06-05 Mo 21:11] =>  1:31
     CLOCK: [2023-06-05 Mo 17:57]--[2023-06-05 Mo 19:23] =>  1:26
     :END:
     I want to create beautiful charts, so I'm going to look first for a Go
     library to render time series charts.
**** Settings
     I want to make things configurable and store that configuration
     client-side in the browser. First, charts - I want to specify the period
     for which the data is graphed. 
***** DONE Period for chart
      CLOSED: [2023-06-06 Di 23:30]
      :LOGBOOK:
      CLOCK: [2023-06-06 Di 19:49]--[2023-06-06 Di 23:30] =>  3:41
      :END:
*** Client [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-06-04 So 17:21]--[2023-06-04 So 19:36] =>  2:15
    :END:
    The client should be relatively straightforward, I think. I'm going to
    start here and work on gathering the data required.
**** DONE Offline buffering
     CLOSED: [2023-06-06 Di 18:51]
     :LOGBOOK:
     CLOCK: [2023-06-06 Di 18:43]--[2023-06-06 Di 18:51] =>  0:08
     CLOCK: [2023-06-06 Di 18:00]--[2023-06-06 Di 18:43] =>  0:43
     CLOCK: [2023-06-06 Di 17:10]--[2023-06-06 Di 17:52] =>  0:42
     :END:
     If the client cannot reach the server, I want it to store its data
     locally until the server is reachable again. I think I can get away with
     just dumping the JSON to files.
** Bugs [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Notes
